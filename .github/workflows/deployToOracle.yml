name: Deploy to Oracle Cloud

on:
  workflow_run:
    workflows: ["Push to Docker Hub"]
    types:
      - completed
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4.1.7

      - name: Install Oracle Cloud CLI
        run: |
          curl -L https://raw.githubusercontent.com/oracle/oci-cli/master/scripts/install/install.sh > install-oci-cli.sh
          chmod +x install-oci-cli.sh
          ./install-oci-cli.sh --accept-all-defaults
          echo "/home/runner/bin" >> $GITHUB_PATH
          echo "LD_LIBRARY_PATH=/home/runner/lib" >> $GITHUB_ENV
          source ~/.bashrc

      - name: Configure Oracle Cloud CLI
        env:
          OCI_CLI_USER: ${{ secrets.OCI_CLI_USER }}
          OCI_CLI_TENANCY: ${{ secrets.OCI_CLI_TENANCY }}
          OCI_CLI_FINGERPRINT: ${{ secrets.OCI_CLI_FINGERPRINT }}
          OCI_CLI_KEY_CONTENT: ${{ secrets.OCI_CLI_KEY_CONTENT }}
          OCI_CLI_REGION: ${{ secrets.OCI_CLI_REGION }}
        run: |
          mkdir -p ~/.oci
          echo "[DEFAULT]" > ~/.oci/config
          echo "user=${OCI_CLI_USER}" >> ~/.oci/config
          echo "tenancy=${OCI_CLI_TENANCY}" >> ~/.oci/config
          echo "fingerprint=${OCI_CLI_FINGERPRINT}" >> ~/.oci/config
          echo "key_file=~/.oci/oci_api_key.pem" >> ~/.oci/config
          echo "region=${OCI_CLI_REGION}" >> ~/.oci/config
          echo "${OCI_CLI_KEY_CONTENT}" > ~/.oci/oci_api_key.pem
          chmod 600 ~/.oci/oci_api_key.pem
          chmod 600 ~/.oci/config
          
      - name: Deploy to Oracle Cloud
        env:
          INSTANCE_OCID: ${{ secrets.INSTANCE_OCID }}
          ORACLE_SSH_PRIVATE_KEY: ${{ secrets.ORACLE_SSH_PRIVATE_KEY }}
          REPO_URL: ${{ secrets.REPO_URL }}  # Adicione esta variável nos secrets do GitHub
        run: |
          # Obtenha o IP público da instância
          INSTANCE_IP=$(oci compute instance list-vnics --instance-id ${INSTANCE_OCID} --query 'data[0]."public-ip"' --raw-output)
          
          # Configurar a chave SSH
          echo "$ORACLE_SSH_PRIVATE_KEY" > oracle_ssh_key
          chmod 600 oracle_ssh_key
          
          # Deploy usando SSH
          ssh -i oracle_ssh_key -o StrictHostKeyChecking=no ubuntu@${INSTANCE_IP} << EOF
            # Crie o diretório do projeto se ele não existir
            mkdir -p /home/ubuntu/meu-projeto
            
            # Navegue para o diretório do projeto
            cd /home/ubuntu/meu-projeto
            
            # Clone ou atualize o repositório
            if [ -d ".git" ]; then
              git pull origin master
            else
              git clone ${REPO_URL} .
            fi
            
            # Verifique se o Docker e o Docker Compose estão instalados
            if ! command -v docker &> /dev/null || ! command -v docker-compose &> /dev/null; then
              echo "Instalando Docker e Docker Compose..."
              sudo apt-get update
              sudo apt-get install -y docker.io docker-compose
              sudo usermod -aG docker $USER
            fi

            # Create .env file with environment variables
            cat << EOT > .env
            DOCKER_USERNAME=${DOCKER_USERNAME}
            MYSQL_ROOT_PASSWORD=${MYSQL_ROOT_PASSWORD}
            JWT_SECRET=${JWT_SECRET}
            EOT
            
            echo "Parando os contêineres existentes..."
            docker-compose stop
            
            echo "Puxando as novas imagens..."
            docker-compose pull
            
            echo "Iniciando os serviços..."
            docker-compose up -d
          EOF
